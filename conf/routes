#   This file is part of opq-ao.
#
#   opa-ao is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   opa-ao is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with opq-ao.  If not, see <http://www.gnu.org/licenses/>.
#
#   Copyright 2013 Anthony Christe

# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                                  controllers.Application.index()

# Sign Up
GET         /signup                                            controllers.Person.signup()
POST        /signup                                            controllers.Person.save()

# Log in/out
GET         /public/login                                      controllers.Application.login()
POST        /public/login/authenticate                         controllers.Application.authenticate()
GET         /private/logout                                    controllers.Application.logout()

# Administration
GET         /private/admin/user                                controllers.Administration.user()
POST        /private/admin/user/update                         controllers.Administration.updateUser()

GET         /private/admin/device                              controllers.Administration.device()
POST        /private/admin/device/save                         controllers.Administration.saveDevice()

GET         /device/:deviceId/:accessKey                       controllers.Administration.configureDevice(deviceId: Long, accessKey: String)
POST        /device                                            controllers.Administration.saveDeviceConfiguration()

# Events
GET         /private/monitor/events                            controllers.Events.newEvents()
GET         /private/monitor/eventsOld                            controllers.Events.eventsByPage(p: Integer ?= 0, after: Long ?= 0)
GET         /private/monitor/events/nearby                     controllers.Events.nearbyEvents()
POST        /private/monitor/events/nearby/filter              controllers.Events.filterNearbyEvents()
GET         /private/monitor/events/nearby/:deviceId           controllers.Events.nearbyEventsByPage(deviceId: Long, page: Integer ?= 0, after: Long ?= 0)
POST        /private/monitor/events/filter                     controllers.Events.filterEvents()
GET         /private/monitor/events/:eventId                   controllers.Events.eventDetails(eventId: Long)

GET         /private/monitor/events/:eventId/raw               controllers.Events.rawPowerData(eventId: Long)


# Public Monitoring
GET         /public/monitor                                    controllers.PowerQualityMonitoring.publicMonitor()
POST        /public/alerts                                     controllers.PowerQualityMonitoring.alertsFromIds()

# Handling WebSockets
GET         /private/ws                                        controllers.WebSockets.handleSocket()
GET         /private/ws/setting/:deviceId/:msg                 controllers.WebSockets.sendToDevice(deviceId: Long, msg: String)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                      controllers.Assets.at(path="/public", file)
